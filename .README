
https://fast-woodland-70297.herokuapp.com/

https://www.materialpalette.com

https://material.io

https://unsplash.com/

http://www.lifeofpix.com/

https://design.google/library/

class PORTFOLIO {
    string PortfolioName;
    string PortfolioCode;
    decimal MarketValue;

    PORTFOLIOSHARECLASS shareClass;
}

class PORTFOLIOSHARECLASS {
    string PortfolioName;
    string PortfolioShareClassName;
    string PortfolioShareClassCode;
    float PortfolioShareClassBaseFee;
}


function Person(n, a) {
    this.name = n;
    this.age = a;
}

var gomu = new Person('고무곰', 30);
var gomuClone1 = new gomu.__proto__.consturctor('고무곰_클론1', 10);

var gomuClone2 = new gomu.constructor('고무곰_클론2', 25);

 var gomuProto = Object.getPrototypeOf(gomu);

 var gomuClone3 = new gomuProto.constructor('고무곰_클론3', 20);

 var gomuClone4 = new Person.prototype.constructor('고무곰_클론4', 15);

 ?) var gomu = new Person('', 30);
 var gomuClone1 = new gomu.__proto__.constructor('', 10);
var gomuClone2 = new gomu.constructor('', 25);

// Is it same gomu.__proto__.constructor === gomu.constuctor



function Person(n, a) {
    this.name = n;
    this.age = a;
}

var emp = new Person('john', 11);


var fs = require('fs');
var csv = require('csv');
var parse = require('csv-parse');

function PORTFOLIO(Fone, Ftwo, Fthree) {
    this.PortfolioName = Fone;
    this.PortfolioCode = Ftwo;
    this.MarketValue = Fthree;
};

var MyData = [];
// 'Portfolio.CSV'
// PortfolioShareClass.CSV
// fs.createReadStream('PortfolioShareClass.CSV')

var generator = csv.generate({ seed: 1, columns: 2, length: 20 });
var parser = csv.parse();
var transformer = csv.transform(function(data) {
    return data.map(function(value) { return value.toUpperCase() });
});
var stringifier = csv.stringify();

console.log(transformer);


var generator = csv.generate({ seed: 1, columns: 2, length: 20 });
var parser = csv.parse();
var transformer = csv.transform(function(data) {
    return data.map(function(value) { return value.toUpperCase() });
});
var stringifier = csv.stringify();

generator.on('readable', function() {
    while (data = generator.read()) {
        parser.write(data);
    }
});

parser.on('readable', function() {
    while (data = parser.read()) {
        transformer.write(data);
    }
});

transformer.on('readable', function() {
    while (data = transformer.read()) {
        stringifier.write(data);
    }
});

stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

var fs = require('fs');
var parse = require('csv-parse');
var async = require('async');

var inputFile='myfile.csv';

var parser = parse({delimiter: ','}, function (err, data) {
  async.eachSeries(data, function (line, callback) {
    // do something with the line
    doSomething(line).then(function() {
      // when processing finishes invoke the callback to move to the next one
      callback();
    });
  })
});
fs.createReadStream(inputFile).pipe(parser);


function PORTFOLIO(Fone, Ftwo, Fthree) {
    this.PortfolioName = Fone;
    this.PortfolioCode = Ftwo;
    this.MarketValue = Fthree;
};

var MyData = [];
// 'Portfolio.CSV'
// PortfolioShareClass.CSV
// fs.createReadStream('PortfolioShareClass.CSV')

var generator = csv.generate({ seed: 1, columns: 2, length: 20 });
var parser = csv.parse();
var transformer = csv.transform(function(data) {
    return data.map(function(value) { return value.toUpperCase() });
});
var stringifier = csv.stringify();

generator.on('readable', function() {
    while (data = generator.read()) {
        parser.write(data);
    }
});

parser.on('readable', function() {
    while (data = parser.read()) {
        transformer.write(data);
    }
});

transformer.on('readable', function() {
    while (data = transformer.read()) {
        stringifier.write(data);
    }
});

stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

function PORTFOLIO(Fone, Ftwo, Fthree) {
    this.PortfolioName = Fone;
    this.PortfolioCode = Ftwo;
    this.MarketValue = Fthree;
};

 stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

transformer.on('readable', function() {
    while (data = transformer.read()) {
        stringifier.write(data);
    }
});

stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

function PORTFOLIO(Fone, Ftwo, Fthree) {
    this.PortfolioName = Fone;
    this.PortfolioCode = Ftwo;
    this.MarketValue = Fthree;
};

 stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

function PORTFOLIO(Fone, Ftwo, Fthree) {
    this.PortfolioName = Fone;
    this.PortfolioCode = Ftwo;
    this.MarketValue = Fthree;
};

 stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});

stringifier.on('readable', function() {
    while (data = stringifier.read()) {
        process.stdout.write(data);
    }
});